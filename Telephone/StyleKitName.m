//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 7/12/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"
@implementation StyleKitName

#pragma mark Cache
static UIColor* _color = nil;

#pragma mark Colors
+ (UIColor*)color { return _color; }

#pragma mark Initialization
+ (void)initialize
{
    // Colors Initialization
//    _color = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _color = [UIColor colorWithRed: 0.879 green: 0.273 blue: 0.273 alpha: 1];
    
}

#pragma mark Drawing Methods

+(void)drawRectPro{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Color Declarations
//    UIColor* color3 = [UIColor colorWithRed: 0.338 green: 0.617 blue: 0.148 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.451 green: 0.678 blue: 0.297 alpha: 1];
    UIColor* shadow2Color = [UIColor colorWithRed: 0.232 green: 0.232 blue: 0.232 alpha: 1];
    UIColor* color12 = [UIColor colorWithRed: 0.185 green: 0.349 blue: 0.361 alpha: 1];
    
    //// Shadow Declarations
    UIColor* shadow2 = shadow2Color;
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;
    UIColor* shadow3 = [UIColor.darkGrayColor colorWithAlphaComponent: 0.73];
    CGSize shadow3Offset = CGSizeMake(-2.1, -1.1);
    CGFloat shadow3BlurRadius = 5;
    
    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, -0, 800, 219)];
    [color12 setFill];
    [rectangle2Path fill];
    
    ////// Rectangle 2 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(rectangle2Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
    
    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);
        
        [opaqueShadow setFill];
        [rectangle2Path fill];
        
        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
    
    
    
    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(-6, 0, 822, 55)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color3 setFill];
    [rectangle3Path fill];
    CGContextRestoreGState(context);
    
    
    
    //// Text Drawing
    CGRect textRect = CGRectMake(36, 126, 102, 31);
    {
        NSString* textContent = @"HOME";
        UIFont* textFont = [UIFont fontWithName: @"AvenirNext-Regular" size: 30];
        [UIColor.whiteColor setFill];
        CGFloat textTextHeight = [textContent sizeWithFont: textFont constrainedToSize: CGSizeMake(CGRectGetWidth(textRect), INFINITY) lineBreakMode: NSLineBreakByWordWrapping].height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withFont: textFont lineBreakMode: NSLineBreakByWordWrapping alignment: UITextAlignmentLeft];
        CGContextRestoreGState(context);
    }
    
    
    //// Bezier 12 Drawing
    UIBezierPath* bezier12Path = UIBezierPath.bezierPath;
    [bezier12Path moveToPoint: CGPointMake(151, 137)];
    [bezier12Path addLineToPoint: CGPointMake(151, 151)];
    [bezier12Path addLineToPoint: CGPointMake(171, 151)];
    [bezier12Path addLineToPoint: CGPointMake(171, 137)];
    [bezier12Path addLineToPoint: CGPointMake(163, 131)];
    [bezier12Path addLineToPoint: CGPointMake(157.67, 134)];
    [UIColor.whiteColor setStroke];
    bezier12Path.lineWidth = 1.5;
    [bezier12Path stroke];

}

+ (void)drawOval{
    CGContextRef context = UIGraphicsGetCurrentContext();

    UIColor* shadow4 = UIColor.darkGrayColor;
    CGSize shadow4Offset = CGSizeMake(4.1, 7.1);
    CGFloat shadow4BlurRadius = 17;
    
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(173, 126, 170, 170)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow4Offset, shadow4BlurRadius, [shadow4 CGColor]);
    [[UIColor colorWithRed: 0.879 green: 0.273 blue: 0.273 alpha: 1] setFill];
    [ovalPath fill];
    CGContextRestoreGState(context);

}

+ (void)drawBurgerMenu//// Group
{
    UIColor* color5 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(15, 29)];
    [bezierPath addCurveToPoint: CGPointMake(35.57, 29) controlPoint1: CGPointMake(40.77, 29) controlPoint2: CGPointMake(35.57, 29)];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
    [color5 setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];
    
    
    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(15, 34)];
    [bezier2Path addCurveToPoint: CGPointMake(35.57, 34) controlPoint1: CGPointMake(40.77, 34) controlPoint2: CGPointMake(35.57, 34)];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];
    [color5 setStroke];
    bezier2Path.lineWidth = 2;
    [bezier2Path stroke];
    
    
    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(15, 39)];
    [bezier3Path addCurveToPoint: CGPointMake(35.57, 39) controlPoint1: CGPointMake(40.77, 39) controlPoint2: CGPointMake(35.57, 39)];
    [UIColor.whiteColor setFill];
    [bezier3Path fill];
    [color5 setStroke];
    bezier3Path.lineWidth = 2;
    [bezier3Path stroke];
}

+ (void)drawNotification
{
    CGContextRef context = UIGraphicsGetCurrentContext();

    UIColor* color2 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* shadow3 = [UIColor.darkGrayColor colorWithAlphaComponent: 0.73];
    CGSize shadow3Offset = CGSizeMake(-2.1, -1.1);
    CGFloat shadow3BlurRadius = 5;




    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(345.5, 27.75)];
    [bezier5Path addLineToPoint: CGPointMake(345.5, 42.35)];
    [bezier5Path addLineToPoint: CGPointMake(358.25, 42.14)];
    [bezier5Path addLineToPoint: CGPointMake(362.75, 46)];
    [bezier5Path addLineToPoint: CGPointMake(362.5, 36.77)];
    [bezier5Path addLineToPoint: CGPointMake(362.5, 27.75)];
    bezier5Path.lineCapStyle = kCGLineCapRound;
    
    [color6 setStroke];
    bezier5Path.lineWidth = 1.5;
    [bezier5Path stroke];
    
    
    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = UIBezierPath.bezierPath;
    [bezier8Path moveToPoint: CGPointMake(346, 28)];
    [bezier8Path addLineToPoint: CGPointMake(363, 28)];
    [color2 setFill];
    [bezier8Path fill];
    
    ////// Bezier 8 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezier8Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
    
    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);
        
        [opaqueShadow setFill];
        [bezier8Path fill];
        
        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
    
    [UIColor.whiteColor setStroke];
    bezier8Path.lineWidth = 1.5;
    [bezier8Path stroke];
}


+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 0.185 green: 0.349 blue: 0.361 alpha: 1];
//    UIColor* color3 = [UIColor colorWithRed: 0 green: 0.439 blue: 0.388 alpha: 1];
//    UIColor* color3 = [UIColor colorWithRed: 0.338 green: 0.617 blue: 0.148 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.451 green: 0.678 blue: 0.297 alpha: 1];
    UIColor* shadow2Color = [UIColor colorWithRed: 0.232 green: 0.232 blue: 0.232 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow = UIColor.blackColor;
    CGSize shadowOffset = CGSizeMake(3.1, 3.1);
    CGFloat shadowBlurRadius = 5;
    UIColor* shadow2 = shadow2Color;
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;
    UIColor* shadow3 = [UIColor.darkGrayColor colorWithAlphaComponent: 0.73];
    CGSize shadow3Offset = CGSizeMake(-2.1, -1.1);
    CGFloat shadow3BlurRadius = 5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 283, 800, 517)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    [color setFill];
    [rectanglePath fill];
    CGContextRestoreGState(context);



    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 800, 283)];
    [color2 setFill];
    [rectangle2Path fill];

    ////// Rectangle 2 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(rectangle2Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [rectangle2Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(-6, 0, 822, 55)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color3 setFill];
    [rectangle3Path fill];
    CGContextRestoreGState(context);
}


+ (void)drawCard{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Color Declarations
    UIColor* shadow2Color = [UIColor colorWithRed: 0.232 green: 0.232 blue: 0.232 alpha: 1];
    
    //// Shadow Declarations
    UIColor* shadow2 = shadow2Color;
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;
    
    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 425, 193)];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];
    
    
    //// Group 2
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(32, 15, 285, 168)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
        [UIColor.whiteColor setFill];
        [rectanglePath fill];
        CGContextRestoreGState(context);
        
        
        
        //// Bezier 9 Drawing
        UIBezierPath* bezier9Path = UIBezierPath.bezierPath;
        [bezier9Path moveToPoint: CGPointMake(231, 156)];
        [bezier9Path addLineToPoint: CGPointMake(243, 168)];
        [bezier9Path addLineToPoint: CGPointMake(255, 156)];
        [[UIColor colorWithRed: 0.928 green: 0.527 blue: 0.527 alpha: 1] setStroke];
        bezier9Path.lineWidth = 1;
        [bezier9Path stroke];
        
        
        //// Bezier 10 Drawing
        UIBezierPath* bezier10Path = UIBezierPath.bezierPath;
        [bezier10Path moveToPoint: CGPointMake(280.5, 167.5)];
        [bezier10Path addLineToPoint: CGPointMake(292.5, 155.5)];
        [bezier10Path addLineToPoint: CGPointMake(304.5, 167.5)];
        [[UIColor colorWithRed: 0.337 green: 0.616 blue: 0.149 alpha: 1] setStroke];
        bezier10Path.lineWidth = 1;
        [bezier10Path stroke];
        
        
        //// Text 5 Drawing
        CGRect text5Rect = CGRectMake(32, 27, 70, 106);
        {
            NSString* textContent = @"“";
            NSMutableParagraphStyle* text5Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text5Style.alignment = NSTextAlignmentLeft;
            
            NSDictionary* text5FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Didot-Italic" size: 80], NSForegroundColorAttributeName: UIColor.lightGrayColor, NSParagraphStyleAttributeName: text5Style};
            
            CGFloat text5TextHeight = [textContent boundingRectWithSize: CGSizeMake(text5Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text5FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text5Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text5Rect), CGRectGetMinY(text5Rect) + (CGRectGetHeight(text5Rect) - text5TextHeight) / 2, CGRectGetWidth(text5Rect), text5TextHeight) withAttributes: text5FontAttributes];
            CGContextRestoreGState(context);
        }
        
        
        //// Text 6 Drawing
        CGRect text6Rect = CGRectMake(268, 50, 70, 106);
        {
            NSString* textContent = @"“”";
            NSMutableParagraphStyle* text6Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            text6Style.alignment = NSTextAlignmentLeft;
            
            NSDictionary* text6FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Didot-Italic" size: 80], NSForegroundColorAttributeName: UIColor.lightGrayColor, NSParagraphStyleAttributeName: text6Style};
            
            CGFloat text6TextHeight = [textContent boundingRectWithSize: CGSizeMake(text6Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text6FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text6Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text6Rect), CGRectGetMinY(text6Rect) + (CGRectGetHeight(text6Rect) - text6TextHeight) / 2, CGRectGetWidth(text6Rect), text6TextHeight) withAttributes: text6FontAttributes];
            CGContextRestoreGState(context);
        }
    }


}



+ (void)drawNoteView{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.788 green: 0.776 blue: 0.702 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.451 green: 0.678 blue: 0.297 alpha: 1];
    UIColor* shadow2Color = [UIColor colorWithRed: 0.232 green: 0.232 blue: 0.232 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color12 = [UIColor colorWithRed: 0.185 green: 0.349 blue: 0.361 alpha: 1];
//    UIColor* color10 = [UIColor colorWithRed: 0.672 green: 0.494 blue: 0.494 alpha: 1];
    
    //// Shadow Declarations
    UIColor* shadow2 = shadow2Color;
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;
    UIColor* shadow3 = [UIColor.darkGrayColor colorWithAlphaComponent: 0.73];
    CGSize shadow3Offset = CGSizeMake(-2.1, -1.1);
    CGFloat shadow3BlurRadius = 5;
    
    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, -0, 800, 156)];
    [color12 setFill];
    [rectangle2Path fill];
    
    ////// Rectangle 2 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(rectangle2Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
    
    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);
        
        [opaqueShadow setFill];
        [rectangle2Path fill];
        
        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
    
    
    
    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(-6, 0, 822, 55)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color3 setFill];
    [rectangle3Path fill];
    CGContextRestoreGState(context);
    
    
    
    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(15, 29)];
        [bezierPath addCurveToPoint: CGPointMake(35.57, 29) controlPoint1: CGPointMake(40.77, 29) controlPoint2: CGPointMake(35.57, 29)];
        [UIColor.whiteColor setFill];
        [bezierPath fill];
        [color5 setStroke];
        bezierPath.lineWidth = 2;
        [bezierPath stroke];
        
        
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
        [bezier2Path moveToPoint: CGPointMake(15, 34)];
        [bezier2Path addCurveToPoint: CGPointMake(35.57, 34) controlPoint1: CGPointMake(40.77, 34) controlPoint2: CGPointMake(35.57, 34)];
        [UIColor.whiteColor setFill];
        [bezier2Path fill];
        [color5 setStroke];
        bezier2Path.lineWidth = 2;
        [bezier2Path stroke];
        
        
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
        [bezier3Path moveToPoint: CGPointMake(15, 39)];
        [bezier3Path addCurveToPoint: CGPointMake(35.57, 39) controlPoint1: CGPointMake(40.77, 39) controlPoint2: CGPointMake(35.57, 39)];
        [UIColor.whiteColor setFill];
        [bezier3Path fill];
        [color5 setStroke];
        bezier3Path.lineWidth = 2;
        [bezier3Path stroke];
    }
    
    
    //// Text Drawing
    CGRect textRect = CGRectMake(45, 94, 155, 36);
    {
        NSString* textContent = @"NOTES";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentLeft;
        
        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-Regular" size: 30], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};
        
        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }
    
    
    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(289, 130, 29, 21);
//    {
//        NSString* textContent = @"+";
//        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
//        text3Style.alignment = NSTextAlignmentLeft;
//        
//        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-UltraLight" size: 45], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: text3Style};
//        
//        CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
//        CGContextSaveGState(context);
//        CGContextClipToRect(context, text3Rect);
//        [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
//        CGContextRestoreGState(context);
//    }
//    
    
    //// Group 5
    {
        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = UIBezierPath.bezierPath;
        [bezier7Path moveToPoint: CGPointMake(166.5, 102.75)];
        [bezier7Path addLineToPoint: CGPointMake(166.5, 117.35)];
        [bezier7Path addLineToPoint: CGPointMake(179.25, 117.14)];
        [bezier7Path addLineToPoint: CGPointMake(183.75, 121)];
        [bezier7Path addLineToPoint: CGPointMake(183.5, 111.77)];
        [bezier7Path addLineToPoint: CGPointMake(183.5, 102.75)];
        bezier7Path.lineCapStyle = kCGLineCapRound;
        
        [color6 setStroke];
        bezier7Path.lineWidth = 1.5;
        [bezier7Path stroke];
        
        
        //// Bezier 11 Drawing
        UIBezierPath* bezier11Path = UIBezierPath.bezierPath;
        [bezier11Path moveToPoint: CGPointMake(166, 103)];
        [bezier11Path addLineToPoint: CGPointMake(184, 103)];
        [color2 setFill];
        [bezier11Path fill];
        
        ////// Bezier 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezier11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
        
        CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);
            
            [opaqueShadow setFill];
            [bezier11Path fill];
            
            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
        
        [UIColor.whiteColor setStroke];
        bezier11Path.lineWidth = 1.5;
        [bezier11Path stroke];
    }
   
    //// Bezier 12 Drawing
    UIBezierPath* bezier12Path = UIBezierPath.bezierPath;
    [bezier12Path moveToPoint: CGPointMake(343, 28)];
    [bezier12Path addLineToPoint: CGPointMake(343, 42)];
    [bezier12Path addLineToPoint: CGPointMake(363, 42)];
    [bezier12Path addLineToPoint: CGPointMake(363, 28)];
    [bezier12Path addLineToPoint: CGPointMake(355, 22)];
    [bezier12Path addLineToPoint: CGPointMake(349.67, 25)];
    [UIColor.whiteColor setStroke];
    bezier12Path.lineWidth = 1.5;
    [bezier12Path stroke];
    
}

+(void) drawProfileViewExtensive{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.788 green: 0.776 blue: 0.702 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.451 green: 0.678 blue: 0.297 alpha: 1];
    UIColor* shadow2Color = [UIColor colorWithRed: 0.232 green: 0.232 blue: 0.232 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color6 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* color12 = [UIColor colorWithRed: 0.185 green: 0.349 blue: 0.361 alpha: 1];
    
    //// Shadow Declarations
    UIColor* shadow2 = shadow2Color;
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;
    UIColor* shadow3 = [UIColor.darkGrayColor colorWithAlphaComponent: 0.73];
    CGSize shadow3Offset = CGSizeMake(-2.1, -1.1);
    CGFloat shadow3BlurRadius = 5;
    
    //// Image Declarations
    UIImage* renderings_bleu = [UIImage imageNamed: @"renderings_bleu.png"];
    
    //// Bezier 6 Drawing
    UIBezierPath* bezier6Path = UIBezierPath.bezierPath;
    [bezier6Path moveToPoint: CGPointMake(800, 0)];
    [bezier6Path addCurveToPoint: CGPointMake(800, 219) controlPoint1: CGPointMake(800, 0) controlPoint2: CGPointMake(800, 219)];
    [bezier6Path addLineToPoint: CGPointMake(342.63, 219)];
    [bezier6Path addCurveToPoint: CGPointMake(343, 211) controlPoint1: CGPointMake(342.87, 216.37) controlPoint2: CGPointMake(343, 213.7)];
    [bezier6Path addCurveToPoint: CGPointMake(258, 126) controlPoint1: CGPointMake(343, 164.06) controlPoint2: CGPointMake(304.94, 126)];
    [bezier6Path addCurveToPoint: CGPointMake(220.28, 134.81) controlPoint1: CGPointMake(244.45, 126) controlPoint2: CGPointMake(231.65, 129.17)];
    [bezier6Path addCurveToPoint: CGPointMake(173, 211) controlPoint1: CGPointMake(192.26, 148.7) controlPoint2: CGPointMake(173, 177.6)];
    [bezier6Path addCurveToPoint: CGPointMake(173.37, 219) controlPoint1: CGPointMake(173, 213.7) controlPoint2: CGPointMake(173.13, 216.37)];
    [bezier6Path addLineToPoint: CGPointMake(0, 219)];
    [bezier6Path addLineToPoint: CGPointMake(0, 0)];
    [bezier6Path addLineToPoint: CGPointMake(800, 0)];
    [bezier6Path addLineToPoint: CGPointMake(800, 0)];
    [bezier6Path closePath];
    [color12 setFill];
    [bezier6Path fill];
    
    ////// Bezier 6 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(bezier6Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
    
    CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);
        
        [opaqueShadow setFill];
        [bezier6Path fill];
        
        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
    
    
    
    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(-6, 0, 822, 55)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color3 setFill];
    [rectangle3Path fill];
    CGContextRestoreGState(context);
    
    
    
    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(15, 29)];
        [bezierPath addCurveToPoint: CGPointMake(35.57, 29) controlPoint1: CGPointMake(40.77, 29) controlPoint2: CGPointMake(35.57, 29)];
        [UIColor.whiteColor setFill];
        [bezierPath fill];
        [color5 setStroke];
        bezierPath.lineWidth = 2;
        [bezierPath stroke];
        
        
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
        [bezier2Path moveToPoint: CGPointMake(15, 34)];
        [bezier2Path addCurveToPoint: CGPointMake(35.57, 34) controlPoint1: CGPointMake(40.77, 34) controlPoint2: CGPointMake(35.57, 34)];
        [UIColor.whiteColor setFill];
        [bezier2Path fill];
        [color5 setStroke];
        bezier2Path.lineWidth = 2;
        [bezier2Path stroke];
        
        
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
        [bezier3Path moveToPoint: CGPointMake(15, 39)];
        [bezier3Path addCurveToPoint: CGPointMake(35.57, 39) controlPoint1: CGPointMake(40.77, 39) controlPoint2: CGPointMake(35.57, 39)];
        [UIColor.whiteColor setFill];
        [bezier3Path fill];
        [color5 setStroke];
        bezier3Path.lineWidth = 2;
        [bezier3Path stroke];
    }
    
    
    //// Group 2
    {
        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
        [bezier5Path moveToPoint: CGPointMake(345.5, 27.75)];
        [bezier5Path addLineToPoint: CGPointMake(345.5, 42.35)];
        [bezier5Path addLineToPoint: CGPointMake(358.25, 42.14)];
        [bezier5Path addLineToPoint: CGPointMake(362.75, 46)];
        [bezier5Path addLineToPoint: CGPointMake(362.5, 36.77)];
        [bezier5Path addLineToPoint: CGPointMake(362.5, 27.75)];
        bezier5Path.lineCapStyle = kCGLineCapRound;
        
        [color6 setStroke];
        bezier5Path.lineWidth = 1.5;
        [bezier5Path stroke];
        
        
        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = UIBezierPath.bezierPath;
        [bezier8Path moveToPoint: CGPointMake(346, 28)];
        [bezier8Path addLineToPoint: CGPointMake(363, 28)];
        [color2 setFill];
        [bezier8Path fill];
        
        ////// Bezier 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezier8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);
        
        CGContextSetAlpha(context, CGColorGetAlpha([shadow3 CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow3 colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow3Offset, shadow3BlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);
            
            [opaqueShadow setFill];
            [bezier8Path fill];
            
            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
        
        [UIColor.whiteColor setStroke];
        bezier8Path.lineWidth = 1.5;
        [bezier8Path stroke];
    }
    
    
    //// Text Drawing
    CGRect textRect = CGRectMake(36, 126, 102, 31);
    {
        NSString* textContent = @"HOME";
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentLeft;
        
        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"AvenirNext-Regular" size: 30], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: textStyle};
        
        CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, textRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
        CGContextRestoreGState(context);
    }
    
    
    //// Bezier 12 Drawing
    UIBezierPath* bezier12Path = UIBezierPath.bezierPath;
    [bezier12Path moveToPoint: CGPointMake(151, 137)];
    [bezier12Path addLineToPoint: CGPointMake(151, 151)];
    [bezier12Path addLineToPoint: CGPointMake(171, 151)];
    [bezier12Path addLineToPoint: CGPointMake(171, 137)];
    [bezier12Path addLineToPoint: CGPointMake(163, 131)];
    [bezier12Path addLineToPoint: CGPointMake(157.67, 134)];
    [UIColor.whiteColor setStroke];
    bezier12Path.lineWidth = 1.5;
    [bezier12Path stroke];
    
    
    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(800, 219)];
    [bezier4Path addCurveToPoint: CGPointMake(800, 800) controlPoint1: CGPointMake(800, 219) controlPoint2: CGPointMake(800, 800)];
    [bezier4Path addLineToPoint: CGPointMake(0, 800)];
    [bezier4Path addLineToPoint: CGPointMake(0, 219)];
    [bezier4Path addLineToPoint: CGPointMake(173.37, 219)];
    [bezier4Path addCurveToPoint: CGPointMake(258, 296) controlPoint1: CGPointMake(177.4, 262.19) controlPoint2: CGPointMake(213.75, 296)];
    [bezier4Path addCurveToPoint: CGPointMake(342.63, 219) controlPoint1: CGPointMake(302.25, 296) controlPoint2: CGPointMake(338.6, 262.19)];
    [bezier4Path addLineToPoint: CGPointMake(800, 219)];
    [bezier4Path addLineToPoint: CGPointMake(800, 219)];
    [bezier4Path closePath];
    [StyleKitName.color setFill];
    [bezier4Path fill];
    
    
    //// renderings_bleu 2 Drawing
    UIBezierPath* renderings_bleu2Path = [UIBezierPath bezierPathWithRect: CGRectMake(151, 100, 219, 228)];
    CGContextSaveGState(context);
    [renderings_bleu2Path addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(151, -100, renderings_bleu.size.width, renderings_bleu.size.height), renderings_bleu.CGImage);
    CGContextRestoreGState(context);

}

@end
